quarkus:
  application:
    name: quarkus-jimmer-example-kt
  package:
    jar:
      enabled: false
      type: uber-jar
  native:
    enabled: true
    additional-build-args: \-H:+UnlockExperimentalVMOptions,\-H:ReflectionConfigurationFiles=reflect-config.json,\-H:ResourceConfigurationFiles=resource-config.json,\-H:DynamicProxyConfigurationResources=proxy-config.json,\-H:JNIConfigurationResources=jni-config.json,\-H:SerializationConfigurationResources=serialization-config.json, \-H:-UnlockExperimentalVMOptions
  http:
    port: 9001
  datasource:
    db-kind: h2
    username: default
    jdbc:
      min-size: 2
      max-size: 8
      url: jdbc:h2:mem:default
    DB2:
      db-kind: h2
      username: db2
      jdbc:
        min-size: 2
        max-size: 8
        url: jdbc:h2:mem:bd2
  log:
    level: DEBUG
  redis:
    hosts: redis://localhost:30506
    timeout: 10s
  jimmer:
    language: kotlin
    show-sql: true
    pretty-sql: true
    inline-sql-variables: true
    trigger-type: TRANSACTION_ONLY
    database-validation:
      mode: NONE
    client:
      ts:
        path: /Code/ts.zip
      openapi:
        path: /openapi.yml
        ui-path: /openapi.html
        properties:
          info:
            title: Jimmer REST Example(Java)
            description: This is the OpenAPI UI of Quarkus-Jimmer-Extension REST Example (Java)
            version: 0.0.1.CR1
          securities:
            - tenantHeader: [ 1 ]
            - OAuth2: [ 2 ]
          components:
            securitySchemes:
              tenantHeader:
                type: apiKey
                name: tenant
                in: HEADER
              OAuth2:
                type: oauth2
                flows:
                  authorizationCode:
                    authorizationUrl: https://example.com/oauth/authorize
                    tokenUrl: https://example.com/oauth/token
                    scopes:
                      read: Grants read access
                      write: Grants write access
                      admin: Grants access to admin operations
                  password:
                    tokenUrl: http://localhost:9000/oauth2/token
                    scopes:
                      address: address
                      openid: openid
                      message.read: message.read
                      groups: groups
                      perms: perms
                      client.create: client.create
          servers:
            - url: http://${quarkus.jimmer.client.openapi.properties.servers[0].variables.username.defaultValue}:${quarkus.jimmer.client.openapi.properties.servers[0].variables.port.defaultValue}
              description: The production API server
              variables:
                username:
                  # note! no enum here means it is an open value
                  defaultValue: localhost
                  description: this value is assigned by the service provider, in this example `gigantic-server.com`
                port:
                  enums:
                    - '9001'
                    - '443'
                  defaultValue: '9001'
                basePath:
                  # open meaning there is the opportunity to use special base paths as assigned by the provider, default is `v2`
                  defaultValue: v2